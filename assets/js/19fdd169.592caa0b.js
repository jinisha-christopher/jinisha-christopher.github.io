"use strict";(self.webpackChunkjini_venishjoe_net=self.webpackChunkjini_venishjoe_net||[]).push([[877],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return b}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),m=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=m(n),b=o,f=c["".concat(a,".").concat(b)]||c[b]||p[b]||l;return n?r.createElement(f,u(u({ref:t},s),{},{components:n})):r.createElement(f,u({ref:t},s))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,u=new Array(l);u[0]=c;var i={};for(var a in t)hasOwnProperty.call(t,a)&&(i[a]=t[a]);i.originalType=e,i.mdxType="string"==typeof e?e:o,u[1]=i;for(var m=2;m<l;m++)u[m]=n[m];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3048:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return a},metadata:function(){return m},toc:function(){return s},default:function(){return c}});var r=n(7462),o=n(3366),l=(n(7294),n(3905)),u=["components"],i={sidebar_position:20,slug:"solution-18"},a="Project Euler Solution 18",m={unversionedId:"project-euler/project-euler-18",id:"project-euler/project-euler-18",isDocsHomePage:!1,title:"Project Euler Solution 18",description:"Problem Statement",source:"@site/docs/project-euler/project-euler-18.md",sourceDirName:"project-euler",slug:"/project-euler/solution-18",permalink:"/project-euler/solution-18",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,slug:"solution-18"},sidebar:"tutorialSidebar",previous:{title:"Project Euler Solution 17",permalink:"/project-euler/solution-17"},next:{title:"Project Euler Solution 19",permalink:"/project-euler/solution-19"}},s=[{value:"Problem Statement",id:"problem-statement",children:[]},{value:"Solution",id:"solution",children:[]},{value:"Implementation",id:"implementation",children:[]},{value:"Sample Output",id:"sample-output",children:[]}],p={toc:s};function c(e){var t=e.components,n=(0,o.Z)(e,u);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"project-euler-solution-18"},"Project Euler Solution 18"),(0,l.kt)("h3",{id:"problem-statement"},"Problem Statement"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"Find the maximum sum travelling from the top of the triangle to the base."))),(0,l.kt)("p",null,"By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23."),(0,l.kt)("p",null,"\xa0","\xa0","\xa0","\xa0",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"3")),(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"7"))," 4",(0,l.kt)("br",null),"\n","\xa0","\xa0","2 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"4"))," 6",(0,l.kt)("br",null),"\n","\xa0","8 5 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"9"))," 3",(0,l.kt)("br",null)),(0,l.kt)("p",null,"That is, 3 + 7 + 4 + 9 = 23."),(0,l.kt)("p",null,"Find the maximum total from top to bottom of the triangle below:"),(0,l.kt)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","75",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","95 64",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","17 47 82",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","18 35 87 10",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","20 04 82 47 65",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","19 01 23 75 03 34",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","88 02 77 73 07 63 67",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","99 65 04 28 06 16 70 92",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","41 41 26 56 83 40 80 70 33",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","41 48 72 33 47 32 37 16 94 29",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","53 71 44 65 25 43 91 52 97 51 14",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","\xa0","70 11 33 28 77 73 17 78 39 68 17 57",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","\xa0","91 71 52 38 17 14 91 43 58 50 27 29 48",(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0","63 66 04 68 89 53 67 30 73 16 69 87 40 31",(0,l.kt)("br",null),"\n","\xa0","\xa0","04 62 98 27 23 09 70 98 73 93 38 53 60 04 23",(0,l.kt)("br",null)),(0,l.kt)("p",null,"NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, ",(0,l.kt)("a",{parentName:"p",href:"/project-euler/solution-67"},"problem 67"),", is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method!"),(0,l.kt)("h3",{id:"solution"},"Solution"),(0,l.kt)("p",null,"My first version of solution to this problem worked only for the above two input but not for one in problem 67."),(0,l.kt)("p",null,"\xa0","\xa0","\xa0","\xa0",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"3")),(0,l.kt)("br",null),"\n","\xa0","\xa0","\xa0",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"7"))," 4",(0,l.kt)("br",null),"\n","\xa0","\xa0","2 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"4"))," 6",(0,l.kt)("br",null),"\n","\xa0","8 5 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"9"))," 3",(0,l.kt)("br",null)),(0,l.kt)("p",null,"We start with the root node 3. Root 3 has two children 7 and 4. Again there are two children for left child 7, namely 2 and 4. Among 2 and 4, 4 is larger so I added 4 to 7 to get 11. For the right child 4, 6 is larger among 6 and 4, so I added 6 with 4 to get 10. Now among 10 and 11, 11 is greater. So I considered the route along 7.  The same above steps are followed with 7 as the root node. "),(0,l.kt)("p",null,"The following program implements what I have explained above. But is not the correct algorithm that works for ",(0,l.kt)("a",{parentName:"p",href:"/project-euler/solution-67"},"problem 67"),"."),(0,l.kt)("h3",{id:"implementation"},"Implementation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <stdio.h>\n#include <stdlib.h>\n\nint No_Rows = 15;\nint main()\n{\n    int number[6000] = { -1 };\n    int index = 0, root, num, sum, level = 1;\n    int r_left, r_right;\n    int left_max_sum, right_max_sum;\n    FILE * f_read;\n    f_read = fopen("inputpe018.txt", "rt");\n    while (fscanf(f_read, "%d", &num) == 1)\n    {\n        number[index] = num;\n        index++;\n    }\n    sum = number[0];\n    root = 0;\n    while (level <= No_Rows)\n    {\n        r_left = root + level;\n        r_right = root + level + 1;\n        if (level == No_Rows)\n        {\n            if (number[r_left] > number[r_right])\n            {\n                sum = sum + number[r_left];\n                printf("%d", sum);\n                return 0;\n            }\n            else\n            {\n                sum = sum + number[r_right];\n                printf("%d", sum);\n                return 0;\n            }\n        }\n        if ((number[r_left] + number[r_left + level + 1]) > (number[r_left] + number[r_left + level + 2]))\n        {\n            left_max_sum = number[r_left] + number[r_left + level + 1];\n        }\n        else left_max_sum = number[r_left] + number[r_left + level + 2];\n        if ((number[r_right] + number[r_right + level + 1]) > (number[r_right] + number[r_right + level + 2]))\n        {\n            right_max_sum = number[r_right] + number[r_right + level + 1];\n        }\n        else right_max_sum = number[r_right] + number[r_right + level + 2];\n        if (left_max_sum > right_max_sum)\n        {\n            sum = sum + number[r_left];\n            root = r_left;\n        }\n        else if (right_max_sum > left_max_sum)\n        {\n            sum = sum + number[r_right];\n            root = r_right;\n        }\n        else if (number[r_left] > number[r_right])\n        {\n            sum = sum + number[r_left];\n            root = r_left;\n        }\n        else\n        {\n            sum = sum + number[r_right];\n            root = r_right;\n        }\n        level++;\n    }\n}\n')),(0,l.kt)("h3",{id:"sample-output"},"Sample Output"),(0,l.kt)("p",null,"Go to ",(0,l.kt)("a",{parentName:"p",href:"/project-euler/solution-67"},"problem 67")," for the correct algorithm."))}c.isMDXComponent=!0}}]);